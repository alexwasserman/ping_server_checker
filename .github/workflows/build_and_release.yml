name: Build and Release Go Binary

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Go Binary
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Compile binary
        run: |
          go mod download
          go get -u github.com/go-ping/ping
          go get -u golang.org/x/net
          go mod download
          go build -o ping_server_checker ./main.go

      - name: Archive binary
        run: zip -r ping_server_checker.zip ping_server_checker

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ping_server_checker
          path: ping_server_checker.zip

  release:
    name: Create GitHub Release with Semantic Versioning
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ping_server_checker

      - name: Get current version tag
        id: get_version
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Bump version
        id: bump_version
        run: |
          latest_tag=${{ steps.get_version.outputs.latest_tag }}
          # Remove 'v' prefix and increment the patch version
          latest_version=$(echo $latest_tag | sed 's/^v//')
          IFS='.' read -r major minor patch <<< "$latest_version"
          new_patch=$((patch+1))
          new_tag="v$major.$minor.$new_patch"
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Create new version tag
        uses: actions-ecosystem/action-create-tag@v1
        with:
          tag: ${{ steps.bump_version.outputs.new_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          name: Release ${{ steps.bump_version.outputs.new_tag }}
          files: ping_server_checker.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
